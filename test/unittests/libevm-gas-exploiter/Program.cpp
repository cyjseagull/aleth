#include <libevm-gas-exploiter/Program.h>

#include <memory>
#include <gtest/gtest.h>

using namespace dev;
using namespace eth;

TEST(Program, ProgramDataFromString)
{
    ProgramData data = "0x0100";
    EXPECT_EQ(data.value, 256);
    EXPECT_EQ(data.size, 2);

    data = "0x00f2fde38b";
    EXPECT_EQ(data.value, 4076725131);
    EXPECT_EQ(data.size, 5);
}


TEST(Program, ProgramDatatoHex)
{
    ProgramData data(266, 2);
    EXPECT_EQ(data.toHex(), "010a");

    data = ProgramData(256, 1);
    EXPECT_EQ(data.toHex(), "00");

    data = ProgramData(256, 32);
    EXPECT_EQ(data.toHex().size(), 64);
}


TEST(Program, InstructiontoHex)
{
    auto inst = std::make_shared<ProgramInstruction>(Instruction::ADD);
    EXPECT_EQ(inst->toHex(), "01");

    inst = std::make_shared<ProgramInstructionWithData>(Instruction::PUSH2, "0x001f");
    EXPECT_EQ(inst->toHex(), "61001f");

    inst = std::make_shared<ProgramInstructionWithData>(Instruction::PUSH1, "0x0f");
    EXPECT_EQ(inst->toHex(), "600f");
}

TEST(Program, addInstruction)
{
    Program program;
    program.addInstruction(Instruction::PUSH1, "0xe0");
    ASSERT_EQ(program.stackSize(), 1);
    program.addInstruction(Instruction::DUP1);
    ASSERT_EQ(program.stackSize(), 2);
    program.addInstruction(Instruction::PUSH4, "0x8da5cb5b");
    ASSERT_EQ(program.stackSize(), 3);
    program.addInstruction(Instruction::GT);
    ASSERT_EQ(program.stackSize(), 2);
}

TEST(Program, stackSizeReverseIndex)
{
    Program program;
    program.addInstruction(Instruction::PUSH1, "0xe0");
    ASSERT_EQ(program.stackSize(), 1);
    program.addInstruction(Instruction::DUP1);
    ASSERT_EQ(program.stackSize(), 2);
    program.addInstruction(Instruction::PUSH4, "0x8da5cb5b");
    ASSERT_EQ(program.stackSize(), 3);
    program.addInstruction(Instruction::GT);
    ASSERT_EQ(program.stackSize(), 2);
    program.addInstruction(Instruction::PUSH1, "0xe0");
    ASSERT_EQ(program.stackSize(), 3);
    program.addInstruction(Instruction::ADD, Program::Protection::Protected);
    ASSERT_EQ(program.stackSize(), 2);
    program.addInstruction(Instruction::POP);
    ASSERT_EQ(program.stackSize(), 1);

    // expected: {1: [1], 2: [2, 4, 6], 3: [3]}
    // because we ignore the first and last stack size
    // and protected instructions should be skipped
    auto reverseIndex = program.stackSizeReverseIndex();
    ASSERT_EQ(reverseIndex.size(), 3);
    ASSERT_EQ(reverseIndex[1].size(), 1);
    ASSERT_EQ(reverseIndex[1][0], 1);
    ASSERT_EQ(reverseIndex[2].size(), 3);
    ASSERT_EQ(reverseIndex[2][0], 2);
    ASSERT_EQ(reverseIndex[2][1], 4);
    ASSERT_EQ(reverseIndex[2][2], 6);
    ASSERT_EQ(reverseIndex[3].size(), 1);
    ASSERT_EQ(reverseIndex[3][0], 3);
}


// program taken from https://etherscan.io/address/0x623520377f092c1c70bd57d17ae9ede6a288412c#contracts
TEST(Program, ProgramtoHex)
{
    Program program;
    program.addInstruction(Instruction::PUSH1, "0xe0");
    program.addInstruction(Instruction::DUP1);
    program.addInstruction(Instruction::PUSH4, "0x8da5cb5b");
    program.addInstruction(Instruction::GT);
    program.addInstruction(Instruction::PUSH2, "0x007f");
    program.addInstruction(Instruction::JUMPI);
    program.addInstruction(Instruction::DUP1);
    program.addInstruction(Instruction::PUSH4, "0xeb12d61e");
    program.addInstruction(Instruction::GT);
    program.addInstruction(Instruction::PUSH2, "0x0059");
    program.addInstruction(Instruction::JUMPI);
    program.addInstruction(Instruction::DUP1);
    program.addInstruction(Instruction::PUSH4, "0xeb12d61e");
    program.addInstruction(Instruction::EQ);
    program.addInstruction(Instruction::PUSH2, "0x025e");
    program.addInstruction(Instruction::JUMPI);
    program.addInstruction(Instruction::DUP1);
    program.addInstruction(Instruction::PUSH4, "0xf14210a6");
    program.addInstruction(Instruction::EQ);
    program.addInstruction(Instruction::PUSH2, "0x027e");
    program.addInstruction(Instruction::JUMPI);
    program.addInstruction(Instruction::DUP1);
    program.addInstruction(Instruction::PUSH4, "0xf2fde38b");
    program.addInstruction(Instruction::EQ);
    program.addInstruction(Instruction::PUSH2, "0x029e");
    program.addInstruction(Instruction::JUMPI);
    program.addInstruction(Instruction::DUP1);
    program.addInstruction(Instruction::PUSH4, "0xfaa6a1b9");
    program.addInstruction(Instruction::EQ);
    program.addInstruction(Instruction::PUSH2, "0x02be");
    program.addInstruction(Instruction::JUMPI);

    std::string expected = "60e080638da5cb5b1161007f578063eb12d61e11610059578063eb12d61e1461025e578063f14210a61461027e578063f2fde38b1461029e578063faa6a1b9146102be57";

    EXPECT_EQ(program.toHex(), expected);
}

TEST(Program, extendSize)
{
    Program program;
    program.addInstruction(Instruction::PUSH1, "0x01");
    program.addInstruction(Instruction::PUSH1, "0x02");
    program.addInstruction(Instruction::ADD);
    EXPECT_EQ(program.size(), 3);
    EXPECT_EQ(program.uniqueSize(), 3);
    program.extendSize(11);
    EXPECT_EQ(program.size(), 12);
    EXPECT_EQ(program.uniqueSize(), 3);
    program.extendSize(20);
    EXPECT_EQ(program.size(), 21);
    EXPECT_EQ(program.uniqueSize(), 3);
}
