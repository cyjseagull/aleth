#pragma once

#include <functional>
#include <random>
#include <map>
#include <string>

#include "Program.h"


namespace dev
{
namespace eth
{

class ProgramGeneratorHook
{
public:
    virtual void execute(
        Program& program,
        const std::shared_ptr<ProgramInstruction> inst,
        std::default_random_engine rand_engine = std::default_random_engine()) = 0;
};


class FixMemoryHook : public ProgramGeneratorHook
{
public:
    /// Manually add the memory length to use on the stack
    /// otherwise it might try to copy huge amount of memory
    /// and very likely fail with out of gas
    void execute(
        Program& program,
        const std::shared_ptr<ProgramInstruction> inst,
        std::default_random_engine rand_engine = std::default_random_engine()) override;
};

extern const std::map<std::string, std::shared_ptr<ProgramGeneratorHook>> availableHooks;

}
}
