#pragma once

#include <map>

#include "ExecutionEnv.h"
#include "InstructionMetadata.h"
#include "ProgramGenerator.h"

namespace dev
{
namespace eth
{
class GeneticEngine
{
public:
    struct Config
    {
        uint32_t populationSize;
        uint32_t initialProgramSize;
        bool debug;
        uint64_t benchmarkExecCount;
        ExecutionEnv execEnv;
        unsigned seed;
    };

    GeneticEngine(Config config, std::unique_ptr<ProgramGenerator> programGenerator);

private:
    /// Config for the genetic algorithm
    Config m_config;

    /// The population of programs
    std::vector<Program> m_population;

    /// A generator to generate the initial set of program
    std::unique_ptr<ProgramGenerator> m_programGenerator;

    std::default_random_engine m_generator;
};

}  // namespace eth
}  // namespace dev
