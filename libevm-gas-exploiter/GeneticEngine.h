#pragma once

#include <map>

#include "ExecutionEnv.h"
#include "InstructionMetadata.h"
#include "ProgramGenerator.h"
#include <boost/optional.hpp>

namespace dev
{
namespace eth
{
namespace
{
const double defaultTournamentSelectionRatio = 0.2;
const double defaultTournamentSelectionProb = 0.5;
}  // namespace


class GeneticEngine
{
public:
    struct TournamentSelectionConfig
    {
        TournamentSelectionConfig()
          : sampleRatio(defaultTournamentSelectionRatio), prob(defaultTournamentSelectionProb)
        {}
        TournamentSelectionConfig(double _sampleRatio, double _prob)
          : sampleRatio(_sampleRatio), prob(_prob)
        {}

        double sampleRatio;
        double prob;
    };

    struct Config
    {
        uint32_t populationSize;
        uint32_t initialProgramSize;
        uint32_t generationsCount;
        double eliteRatio;
        bool debug;
        uint64_t benchmarkExecCount;
        TournamentSelectionConfig tournamentSelectionConfig;
        ExecutionEnv execEnv;
        unsigned seed;
    };

    struct Stats
    {
        uint64_t generationNumber;
        double minThroughput;
        double averageThroughput;
        size_t bestProgramSize;
    };

    struct EvaluatedProgram
    {
        explicit EvaluatedProgram(Program _program) : program(_program), evaluation(boost::none) {}
        EvaluatedProgram(Program _program, ExecutionAggregatedStats _evaluation)
          : program(_program), evaluation(_evaluation)
        {}
        Program program;
        boost::optional<ExecutionAggregatedStats> evaluation;
    };

    GeneticEngine(Config config, std::shared_ptr<ProgramGenerator> programGenerator);

    void run();
    Stats computeFitness();
    void advanceGeneration();
    std::shared_ptr<EvaluatedProgram> tournamentSelection()
    {
        return tournamentSelection(m_population, m_config.tournamentSelectionConfig);
    };
    std::shared_ptr<EvaluatedProgram> tournamentSelection(
        const std::vector<std::shared_ptr<EvaluatedProgram>>& population,
        TournamentSelectionConfig config);

    /// The procedure for cross-over is as follow:
    /// 1. Compute a reversed index where the key is the stack size
    /// and the value is a list of points in the program where it has this
    /// particular stack size
    /// 2. Find the stack sizes that the two programs have in common
    /// 3. Sample one of these stack sizes based on how frequent they are
    /// 4. Select a random value in each of the reverse indexes
    /// 5. Take the first program up to the selected index
    /// and the second program up to the other selected index
    Program crossOver(const Program& prog, const Program& other);

    const std::vector<Stats>& stats() const { return m_stats; }
    const std::vector<std::shared_ptr<EvaluatedProgram>>& population() const
    {
        return m_population;
    }

    const Config& config() const { return m_config; }
    std::shared_ptr<ProgramGenerator> programGenerator() { return m_programGenerator; }

    static bool comparePrograms(std::shared_ptr<EvaluatedProgram> left,
                                std::shared_ptr<EvaluatedProgram> right)
    {
        if (!left->evaluation.is_initialized() || !right->evaluation.is_initialized())
        {
            throw std::runtime_error("tyring to compared non-initialized evaluations");
        }
        return left->evaluation->gasPerSecond < right->evaluation->gasPerSecond;
    }

private:
    /// Config for the genetic algorithm
    Config m_config;

    /// The population of programs
    std::vector<std::shared_ptr<EvaluatedProgram>> m_population;

    /// Stats about each generation
    std::vector<Stats> m_stats;

    /// A generator to generate the initial set of program
    std::shared_ptr<ProgramGenerator> m_programGenerator;

    std::default_random_engine m_generator;

    /// Helper for cross-over
    void appendProgram(Program& child, const Program& parent,
                       const std::vector<size_t>& stackCandidates, bool useTail);
};

}  // namespace eth
}  // namespace dev
