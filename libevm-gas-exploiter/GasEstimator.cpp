#include "GasEstimator.h"


namespace dev
{
namespace eth
{

GasEstimator::GasEstimator(EVMSchedule _schedule)
    : m_schedule(_schedule) {}


uint32_t GasEstimator::estimateSpecialTierGas(Instruction instruction)
{
    switch (instruction)
    {
    case Instruction::SHA3:
        return m_schedule.sha3Gas + 3 * m_schedule.sha3WordGas;
    case Instruction::EXP:
        return m_schedule.expGas + m_schedule.expByteGas * 4;
    case Instruction::BALANCE:
        return m_schedule.balanceGas;
    case Instruction::EXTCODESIZE:
        return m_schedule.extcodesizeGas;
    case Instruction::EXTCODECOPY:
        return m_schedule.extcodecopyGas;
    case Instruction::EXTCODEHASH:
        return m_schedule.extcodehashGas;
    case Instruction::BLOCKHASH:
        return m_schedule.blockhashGas;
    case Instruction::SLOAD:
        return m_schedule.sloadGas;
    case Instruction::SSTORE:
        return m_schedule.sstoreSetGas;
    case Instruction::JUMPDEST:
        return 1;
    case Instruction::LOG0:
    case Instruction::LOG1:
    case Instruction::LOG2:
    case Instruction::LOG3:
    case Instruction::LOG4:
    {
        auto n = static_cast<unsigned>(instruction) - static_cast<unsigned>(Instruction::LOG0);
        return m_schedule.logGas + m_schedule.logTopicGas * n + m_schedule.logDataGas * 2;
        return 1;
    }
    default:
        return 0;
    }
}

uint32_t GasEstimator::estimateGas(Instruction instruction)
{
    auto info = instructionInfo(instruction);

    switch (info.gasPriceTier)
    {
    case Tier::Special:
        return estimateSpecialTierGas(instruction);
    case Tier::Invalid:
        return 0;
    default:
        return m_schedule.tierStepGas[static_cast<int>(instruction)];
    }
}

}
}
