#include <libevm/Instruction.h>

#include "InstructionHelpers.h"


namespace dev
{
namespace eth
{

static const uint8_t push1Opcode = static_cast<uint8_t>(Instruction::PUSH1);
static const uint8_t push32Opcode = static_cast<uint8_t>(Instruction::PUSH32);

bool isPush(Instruction instruction)
{
    auto opcode = static_cast<uint8_t>(instruction);
    return opcode >= push1Opcode && opcode <= push32Opcode;
}

uint8_t pushOperandSize(Instruction instruction)
{
    auto opcode = static_cast<uint8_t>(instruction);
    return opcode - push1Opcode + 1;
}

u256 pushMaxValue(Instruction instruction)
{
    auto bits = pushOperandSize(instruction) * 8;
    auto maxValue = (u512(1) << bits) - 1;
    return maxValue.convert_to<u256>();
}


}
}
