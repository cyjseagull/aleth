#include "Program.h"

#include <stdexcept>


namespace dev
{
namespace eth
{

std::string ProgramData::toString() const
{
    std::stringstream ss;
    size_t stringSize = size * 2;
    ss << std::hex << std::setw(stringSize) << std::setfill('0') << value;
    auto res = ss.str();
    if (res.size() > stringSize)
    {
        res = res.substr(res.size() - stringSize, res.size());
    }
    return res;
}

std::string ProgramInstruction::toBytecode() const
{
    std::stringstream ss;
    ss << std::hex << std::setw(2) << std::setfill('0') << static_cast<int>(m_instruction);
    return ss.str();
}

std::string ProgramInstructionWithData::toBytecode() const
{
    std::stringstream ss;
    ss << ProgramInstruction::toBytecode();
    ss << m_data.toString();
    return ss.str();
}


Program::Program() {}
Program::Program(std::vector<ProgramInstruction> _instructions)
    : m_instructions(_instructions) {}


void Program::addInstruction(ProgramInstruction pInstruction)
{
    auto info = instructionInfo(pInstruction.instruction());
    if (static_cast<uint64_t>(info.args) > m_stackSize)
    {
        throw std::runtime_error("not enough words on the stack");
    }
    auto stackDifference = info.ret - info.args;
    m_stackSize += stackDifference;
    m_instructions.push_back(pInstruction);
}

std::string Program::toBytecode() const
{
    std::stringstream sstream;
    for (auto& inst: m_instructions)
    {
        sstream << inst.toBytecode();
    }
    return sstream.str();
}

}
}
