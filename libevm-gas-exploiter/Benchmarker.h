#pragma once

#include <json/json.h>

#include "ExecutionEnv.h"

namespace dev
{
namespace eth
{
struct BenchmarkStats
{
    double blockExecutionTimeMean;
    double blockExecutionTimeMedian;
    double blockExecutionTimeStdev;
    double blockGas;
    double blockThroughputMean;
    double blockThroughputMedian;
    std::vector<double> blockExecutionTimes;
    std::vector<ExecutionAggregatedStats> programStats;

    Json::Value toJson(bool verbose = false) const;
};

struct BenchmarkConfig
{
    BenchmarkConfig(uint64_t _execCount, bool _debug = false,
                    bool _warmup = true, bool _dropCaches = false,
                    bool _alwaysDropCache = false)
        : execCount(_execCount), debug(_debug), warmup(_warmup),
          dropCaches(_dropCaches), alwaysDropCache(_alwaysDropCache) {}

    uint64_t execCount;
    bool debug = false;
    bool warmup = true;
    bool dropCaches = false;
    bool alwaysDropCache = false;
};

ExecutionStats executeCode(bytes code, ExecutionEnv execEnv, bool debug = false);
ExecutionAggregatedStats benchmarkCode(ExecutionEnv execEnv, bytes code, BenchmarkConfig config);
BenchmarkStats benchmarkCodes(
    ExecutionEnv execEnv, const std::vector<bytes>& codes, BenchmarkConfig config);
}
}
