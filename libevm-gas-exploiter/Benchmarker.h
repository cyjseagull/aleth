#pragma once

#include "ExecutionEnv.h"

#include <type_traits>

namespace dev
{
namespace eth
{

template<typename It>
typename std::iterator_traits<It>::value_type median(It first, It last)
{
    std::sort(first, last);
    auto size = last - first;
    if (size % 2 == 1U)
    {
        return *(first + (size / 2U));
    }
    auto&& high = first + (size / 2U);
    auto&& low = first + (size / 2U - 1U);
    auto sum = *low + *high;
    return sum / 2;
}

template<typename It>
typename std::iterator_traits<It>::value_type constMedian(It first, It last)
{
    std::vector<typename std::iterator_traits<It>::value_type> v(first, last);
    return median(v.begin(), v.end());
}

struct BenchmarkConfig
{
    BenchmarkConfig(uint64_t _execCount, bool _debug = false,
                    bool _warmup = true, bool _dropCaches = false,
                    bool _flush = false)
        : execCount(_execCount), debug(_debug), warmup(_warmup),
          dropCaches(_dropCaches), flush(_flush) {}

    uint64_t execCount;
    bool debug = false;
    bool warmup = true;
    bool dropCaches = false;
    bool flush = false;
};

ExecutionStats executeCode(bytes code, ExecutionEnv execEnv, bool debug = false);
ExecutionAggregatedStats benchmarkCode(ExecutionEnv execEnv, bytes code, BenchmarkConfig config);


}
}
